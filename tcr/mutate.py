# Copyright 2022 Kristofer Henderson
#
# MIT License:
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from tcr.wallet import Wallet
from tcr.cardano import Cardano
from tcr.database import Database
import logging
import argparse
import tcr.command
import tcr.nftmint
import traceback
import json
import requests
import urllib
import PIL.Image
import io
import os
import datetime
import shutil
import pathlib

MINT_PAYMENT = 10000000

potency_lut = {
    'low': 1,
    'medium-low': 2,
    'medium': 3,
    'medium-high': 4,
    'high': 5,
}

# Generates the mutant image.
#
# @param normie_path Path to the initial image for the AI algorithm.
# @param mutant_path The image generated by the AI algorithm should be saved to
#                    this location.
# @param potency A value ranging from low (1) to high (5).  The AI algorithm
#                should produce a more mutated image for higher potency.
#
# @return true if successful.
def mutate_normie(normie_path: str, mutant_path: str, potency: int) -> bool:
    logger = logging.getLogger('mainnet')
    logger.info('Mutate: potency = {}, input = {}'.format(potency, normie_path))

    # Run the AI mutation algorithm
    shutil.copyfile(normie_path, mutant_path)

    logger.info('Mutate: output = {}'.format(mutant_path))
    return os.path.exists(mutant_path)

# Process the normies package.
#
# Unzips the normies file then processes each request in the file by calling
# mutate_normie.  Saves the output in a sub directory and zips everything
# together.
#
# @param network Just a name for the logger.  The Cardano network isn't used in
#                this process.
# @param normies_file zip file package.
#
def process_normies(network: str, normies_file: str) -> None:
    logger = logging.getLogger(network)

    if not os.path.exists('normies'):
        os.mkdir('normies')

    if not os.path.exists('mutants'):
        os.mkdir('mutants')

    normies_subdir = 'normies/{}'.format(pathlib.Path(normies_file).stem)
    if not os.path.exists(normies_subdir):
        os.mkdir(normies_subdir)

    mutants_subdir = 'mutants/{}'.format(pathlib.Path(normies_file).stem)
    if not os.path.exists(mutants_subdir):
        os.mkdir(mutants_subdir)

    shutil.unpack_archive(normies_file, normies_subdir)

    normies_list = None
    with open(normies_subdir + '/normies.json', 'r') as file:
        normies_list = json.load(file)
    if normies_list == None:
        logger.error('Unable to parse {}'.format("normies.json"))
        raise Exception('Unable to parse {}'.format("normies.json"))

    mutants_list = []
    for normie in normies_list:
        normie_image = normies_subdir + '/' + normie['normie-image']
        mutant_image = mutants_subdir + '/' + normie['normie-fingerprint'] + '_mutant.png'
        if not mutate_normie(normie_image, mutant_image, normie['potency']):
            logger.error('Error mutating')
            raise Exception('Error mutating')

        mutant = {
            'from': normie['from'],
            'tx': normie['tx'],
            'normie-fingerprint': normie['normie-fingerprint'],
            'mutation-fingerprint': normie['mutation-fingerprint'],
            'mutant-image': pathlib.Path(mutant_image).name
        }
        mutants_list.append(mutant)

    with open(mutants_subdir + '/mutants.json', 'w') as file:
        file.write(json.dumps(mutants_list, indent=4))

    shutil.make_archive(mutants_subdir+'_mutants', 'zip', mutants_subdir)
    logger.info('Mutants Package: {}.zip'.format(mutants_subdir+'_mutants'))

# Creates the normies package.
#
# This process requires cardano-node and cardano-db-sync to be running.
#
# @param network "mainnet" or "testnet"
# @param wallet_name A previously created wallet to search for incoming UTXOs.
# @param requests_file JSON file of requests
def process_requests(network: str, wallet_name: str, requests_file: str) -> None:
    if not network in tcr.command.networks:
        raise Exception('Invalid Network: {}'.format(network))

    # Open the whitelist to make sure only approved projects are mutated.
    mutate_whitelist = {}
    with open('mutate_whitelist.json', 'r') as file:
        mutate_whitelist = json.load(file)
    if mutate_whitelist == None:
        logger.error('Unable to parse {}'.format("mutate_whitelist.json"))
        raise Exception('Unable to parse {}'.format("mutate_whitelist.json"))

    # Open the wallet to monitor for incoming payments and initialize the
    # payment address if necessary
    wallet = Wallet(wallet_name, network)
    if not wallet.exists():
        logger.error('Wallet: <{}> does not exist'.format(wallet_name))
        raise Exception('Wallet: <{}> does not exist'.format(wallet_name))

    addr_index = Wallet.ADDRESS_INDEX_MUTATE_REQUEST
    if wallet.get_payment_address(addr_index) == None:
        wallet.setup_address(addr_index)

    # General setup
    logger = logging.getLogger(network)
    cardano = Cardano(network, '{}_protocol_parameters.json'.format(network))

    tip = cardano.query_tip()
    cardano.query_protocol_parameters()
    tip_slot = tip['slot']

    database = Database('{}.ini'.format(network))
    database.open()
    latest_slot = database.query_latest_slot()
    sync_progress = database.query_sync_progress()
    logger.info('Cardano Node Tip Slot: {}'.format(tip_slot))
    logger.info(' Database Latest Slot: {}'.format(latest_slot))
    logger.info('Sync Progress: {}'.format(sync_progress))

    # Open all the mutation requests
    requests = None
    with open(requests_file, 'r') as file:
        requests = json.load(file)
        if requests == None:
            logger.error('Unable to parse {}'.format(requests_file))
            raise Exception('Unable to parse {}'.format(requests_file))

    # Populate UTXOs with the address of the sender and stake address of the
    # sender
    (utxos, total_lovelace) = cardano.query_utxos(wallet,
                                                  [wallet.get_payment_address(addr_index, delegated=True),
                                                   wallet.get_payment_address(addr_index, delegated=False)])
    for utxo in utxos:
        inputs = database.query_utxo_inputs(utxo['tx-hash'])
        utxo['from'] = inputs[0]['address']
        utxo['from_stake'] = database.query_stake_address(utxo['from'])

    # Setup directories for output files
    if not os.path.exists('normie_pkg'):
        os.mkdir('normie_pkg')

    subdir = 'normie_pkg/{}'.format(datetime.datetime.today().strftime('%Y_%m_%d'))
    if not os.path.exists(subdir):
        os.mkdir(subdir)

    normies_pkg = []
    # Process the request and build the mutation package
    logger.info('Mutation Address: {}'.format(wallet.get_payment_address(addr_index)))
    for r in requests['requests']:
        logger.info('Process: {}: {}/{}'.format(r['name'], r['normie'], r['mutation']))
        normie_owner = database.query_owner_by_fingerprint(r['normie'])
        mutation_owner = database.query_owner_by_fingerprint(r['mutation'])

        if normie_owner != mutation_owner:
            logger.error('Owner mismatch for {}: {} != {}'.format(r['name'], r['normie'], r['mutation']))
            continue

        (normie_policy, normie_md) = database.query_nft_metadata(r['normie'])
        (mutation_policy, mutation_md) = database.query_nft_metadata(r['mutation'])

        if mutation_policy != '7135025a3c23035cdcff4ef8ae3849248afd369466ea1abef61a4157':
            logger.error('Invalid mutation policy: {}'.format(mutation_policy))
            continue

        if normie_policy not in mutate_whitelist:
            logger.error('Unapproved normie policy: {}'.format(normie_policy))
            continue

        # search for a payment that matches the request
        payment = None
        for utxo in utxos:
            if utxo['from_stake'] == normie_owner:
                payment = utxo
                break

        if payment == None:
            logger.error('No payment found')
            continue

        # remove this one from the list so it doesn't get processed more than
        # once
        utxos.remove(payment)

        if payment['amount'] != MINT_PAYMENT or len(payment['assets']) != 0:
            logger.error('Invalid payment: {} / {}'.format(payment['amount'], payment['assets']))
            continue

        cid = normie_md['image'][7:]
        #download_url = 'https://ipfs.io/ipfs/{}'.format(cid)
        download_url = 'https://infura-ipfs.io/ipfs/{}'.format(cid)
        logger.info('Download Normie: {}'.format(download_url))

        fd = urllib.request.urlopen(download_url)
        if fd.status != 200:
            logger.info('HTTP Error: {}'.format(fd.status))
            continue

        image_file = io.BytesIO(fd.read())
        im = PIL.Image.open(image_file)
        im.save(subdir + '/' + r['normie'] + '.png', format='png')
        normie = {
            'from': payment['from'],
            'tx': '{}:{}'.format(payment['tx-hash'], payment['tx-ix']),
            'potency': potency_lut[mutation_md['potency']],
            'normie-image': r['normie']+'.png',
            'normie-fingerprint': r['normie'],
            'mutation-fingerprint': r['mutation']
        }
        normies_pkg.append(normie)

    with open('{}/normies.json'.format(subdir), 'w') as f:
        f.write(json.dumps(normies_pkg, indent=4))

    shutil.make_archive(subdir, 'zip', subdir)
    logger.info('Normies Package: {}.zip'.format(subdir))

def main():
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument('--requests', required=False,
                                      action='store',
                                      type=str,
                                      metavar='FILE',
                                      help='Filename of mutation request JSON.')
    parser.add_argument('--wallet', required=False,
                                    action='store',
                                    type=str,
                                    metavar='NAME',
                                    help='Wallet name to check payments.')
    parser.add_argument('--normies', required=False,
                                     action='store',
                                     type=str,
                                     metavar='FILE',
                                     help='The output file from --requests / input for AI algorithm')

    network = 'mainnet'
    tcr.nftmint.setup_logging(network, 'mutate')

    args = parser.parse_args()
    if args.requests != None:
        if args.wallet == None:
            raise Exception('--wallet required with --requests')
        process_requests(network, args.wallet, args.requests)
    elif args.normies != None:
        process_normies(network, args.normies)
    else:
        raise Exception('--requests or --normies required')

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print('')
        print('')
        print('EXCEPTION: {}'.format(e))
        print('')
        traceback.print_exc()
